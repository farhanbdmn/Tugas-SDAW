#include<iostream>
 
using namespace std;
 
// Struk untuk merepresentasikan node dalam daftar adjacency.
struct node
{
	int data;
	struct node *link;
};
 
// Struk untuk mewakili daftar simpul terhubung ke vertex yang diberikan.
struct vertexlist
{
	struct node *vlisthead;
};
 
// Struk untuk mempertahankan simpul graph dan koneksinya ke simpul lain.
struct Graph
{
	int v;
	struct vertexlist *vl; 
};
 
// Fungsi untuk menyatakan graph sesuai dengan jumlah titik.
struct Graph* CreateGraph(int n)
{
	int i;
	struct Graph *vlist = new Graph;
	vlist->v = n;
 
	// mendeklarasikan daftar untuk n verteks.
	vlist->vl = new vertexlist[n+1];
 
	// Tetapkan head ke NULL.
	for(i = 0; i < n+1; i++)
	{
		vlist->vl[i].vlisthead = NULL;
	}
 
	return vlist;
}
 
// Suatu fungsi untuk membuat simpul data baru.
struct node* NewNode(int value)
{
	struct node *newnode = new node;
	newnode->data = value;
	newnode->link = NULL;
 
	return newnode;
}
 
// Suatu fungsi untuk menambahkan tepi ke dalam graph yang tidak diarahkan.
void InsertNode(Graph *G, int v1, int v2)
{
	node *newnode1 = NewNode(v1);
	node *newnode2 = NewNode(v2);
	node *temp = new node;
	// Karena graph tidak diarahkan, hitung setiap sisi sebagai dua sambungan.
	// Koneksi 1, v2 ke v1.
	if(G->vl[v2].vlisthead == NULL)
	{
		// Jika head kosong masukkan node ke head.
		G->vl[v2].vlisthead = newnode1;
	}
	else
	{
		// Jika tidak, tambahkan node di awal.
		newnode1->link = G->vl[v2].vlisthead;
		G->vl[v2].vlisthead = newnode1;
	}
	// Koneksi 2, v1 to v2.
	if(G->vl[v1].vlisthead == NULL)
	{
		// Jika head kosong masukkan node ke head.
		G->vl[v1].vlisthead = newnode2;
	}
	else
	{
		// Jika tidak, tambahkan node di awal.
		newnode2->link = G->vl[v1].vlisthead;
		G->vl[v1].vlisthead = newnode2;
	}
}
 
int main()
{
	int i, v, e;
 
	cout<<"Masukkan jumlah simpul graph: ";
	cin>>v;
	struct Graph *G = CreateGraph(v);
	cout<<"\nMasukkan jumlah sisi graph: ";
	cin>>e;
	int edge[e][2];
 
	for(i = 0; i < e; i++)
	{
		cout<<"\nMasukkan the vertex pair for edge "<<i+1;
		cout<<"\nV(1): ";
		cin>>edge[i][0];
		cout<<"V(2): ";
		cin>>edge[i][1];
 
		InsertNode(G, edge[i][0], edge[i][1]);
	}
 
	cout<<"\n\nHasilnya adalah: ";
	for(i = 0; i < v; i++)
	{
		cout<<"\n\tV("<<i+1<<") -> {  ";
		while(G->vl[i+1].vlisthead != NULL)
		{
			cout<<G->vl[i+1].vlisthead->data<<"  ";
			G->vl[i+1].vlisthead = G->vl[i+1].vlisthead->link;
		}
		cout<<"}";
	}
}
